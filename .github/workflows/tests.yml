# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    paths-ignore:
      - 'doc/**'
      - '.readthedocs.yml '
      - '.gitignore'
      - 'snippets/**'
      - '.pre-commit-config.yaml '
      - 'setup.cfg'
      - '.github/ISSUE_TEMPLATE'
    branches:
      - master
      - develop
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '.readthedocs.yml '
      - '.gitignore'
      - 'snippets/**'
      - '.pre-commit-config.yaml '
      - 'setup.cfg'
      - '.github/ISSUE_TEMPLATE'
    branches:
      - '**'
jobs:
  tests:

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2.0.0
      with:
        poetry-version: 1.1.4

    - name: Configure poetry
      shell: bash
      run: python -m poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: timeout 10s python -m poetry run pip --version || rm -rf .venv

    - name: Install dependencies
      shell: bash
      run: python -m poetry install

    - name: Test with pytest
      run: |
        poetry pytest
